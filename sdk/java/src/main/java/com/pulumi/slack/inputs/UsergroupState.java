// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UsergroupState extends com.pulumi.resources.ResourceArgs {

    public static final UsergroupState Empty = new UsergroupState();

    /**
     * channel IDs for which the User Group uses as a default.
     * 
     */
    @Import(name="channels")
    private @Nullable Output<List<String>> channels;

    /**
     * @return channel IDs for which the User Group uses as a default.
     * 
     */
    public Optional<Output<List<String>>> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * a short description of the User Group.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return a short description of the User Group.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * a mention handle. Must be unique among channels, users
     * and User Groups.
     * 
     */
    @Import(name="handle")
    private @Nullable Output<String> handle;

    /**
     * @return a mention handle. Must be unique among channels, users
     * and User Groups.
     * 
     */
    public Optional<Output<String>> handle() {
        return Optional.ofNullable(this.handle);
    }

    /**
     * a name for the User Group. Must be unique among User Groups.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return a name for the User Group. Must be unique among User Groups.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<String>> users;

    /**
     * @return user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    public Optional<Output<List<String>>> users() {
        return Optional.ofNullable(this.users);
    }

    private UsergroupState() {}

    private UsergroupState(UsergroupState $) {
        this.channels = $.channels;
        this.description = $.description;
        this.handle = $.handle;
        this.name = $.name;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsergroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsergroupState $;

        public Builder() {
            $ = new UsergroupState();
        }

        public Builder(UsergroupState defaults) {
            $ = new UsergroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param channels channel IDs for which the User Group uses as a default.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Output<List<String>> channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param channels channel IDs for which the User Group uses as a default.
         * 
         * @return builder
         * 
         */
        public Builder channels(List<String> channels) {
            return channels(Output.of(channels));
        }

        /**
         * @param channels channel IDs for which the User Group uses as a default.
         * 
         * @return builder
         * 
         */
        public Builder channels(String... channels) {
            return channels(List.of(channels));
        }

        /**
         * @param description a short description of the User Group.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description a short description of the User Group.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param handle a mention handle. Must be unique among channels, users
         * and User Groups.
         * 
         * @return builder
         * 
         */
        public Builder handle(@Nullable Output<String> handle) {
            $.handle = handle;
            return this;
        }

        /**
         * @param handle a mention handle. Must be unique among channels, users
         * and User Groups.
         * 
         * @return builder
         * 
         */
        public Builder handle(String handle) {
            return handle(Output.of(handle));
        }

        /**
         * @param name a name for the User Group. Must be unique among User Groups.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name a name for the User Group. Must be unique among User Groups.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param users user IDs that represent the entire list of users for the
         * User Group.
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<String>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users user IDs that represent the entire list of users for the
         * User Group.
         * 
         * @return builder
         * 
         */
        public Builder users(List<String> users) {
            return users(Output.of(users));
        }

        /**
         * @param users user IDs that represent the entire list of users for the
         * User Group.
         * 
         * @return builder
         * 
         */
        public Builder users(String... users) {
            return users(List.of(users));
        }

        public UsergroupState build() {
            return $;
        }
    }

}
