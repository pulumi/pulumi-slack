// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsergroupResult {
    /**
     * @return The channel IDs for which the User Group uses as a default.
     * 
     */
    private final List<String> channels;
    /**
     * @return The short description of the User Group.
     * 
     */
    private final String description;
    /**
     * @return The mention handle.
     * 
     */
    private final String handle;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    private final @Nullable String name;
    private final @Nullable String usergroupId;
    /**
     * @return The user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    private final List<String> users;

    @CustomType.Constructor
    private GetUsergroupResult(
        @CustomType.Parameter("channels") List<String> channels,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("handle") String handle,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("usergroupId") @Nullable String usergroupId,
        @CustomType.Parameter("users") List<String> users) {
        this.channels = channels;
        this.description = description;
        this.handle = handle;
        this.id = id;
        this.name = name;
        this.usergroupId = usergroupId;
        this.users = users;
    }

    /**
     * @return The channel IDs for which the User Group uses as a default.
     * 
     */
    public List<String> channels() {
        return this.channels;
    }
    /**
     * @return The short description of the User Group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The mention handle.
     * 
     */
    public String handle() {
        return this.handle;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> usergroupId() {
        return Optional.ofNullable(this.usergroupId);
    }
    /**
     * @return The user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsergroupResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> channels;
        private String description;
        private String handle;
        private String id;
        private @Nullable String name;
        private @Nullable String usergroupId;
        private List<String> users;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUsergroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channels = defaults.channels;
    	      this.description = defaults.description;
    	      this.handle = defaults.handle;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.usergroupId = defaults.usergroupId;
    	      this.users = defaults.users;
        }

        public Builder channels(List<String> channels) {
            this.channels = Objects.requireNonNull(channels);
            return this;
        }
        public Builder channels(String... channels) {
            return channels(List.of(channels));
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder handle(String handle) {
            this.handle = Objects.requireNonNull(handle);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder usergroupId(@Nullable String usergroupId) {
            this.usergroupId = usergroupId;
            return this;
        }
        public Builder users(List<String> users) {
            this.users = Objects.requireNonNull(users);
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }        public GetUsergroupResult build() {
            return new GetUsergroupResult(channels, description, handle, id, name, usergroupId, users);
        }
    }
}
