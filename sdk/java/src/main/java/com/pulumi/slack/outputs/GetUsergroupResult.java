// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetUsergroupResult {
    /**
     * @return The channel IDs for which the User Group uses as a default.
     * 
     */
    private List<String> channels;
    /**
     * @return The short description of the User Group.
     * 
     */
    private String description;
    /**
     * @return The mention handle.
     * 
     */
    private String handle;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable String name;
    private @Nullable String usergroupId;
    /**
     * @return The user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    private List<String> users;

    private GetUsergroupResult() {}
    /**
     * @return The channel IDs for which the User Group uses as a default.
     * 
     */
    public List<String> channels() {
        return this.channels;
    }
    /**
     * @return The short description of the User Group.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The mention handle.
     * 
     */
    public String handle() {
        return this.handle;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<String> usergroupId() {
        return Optional.ofNullable(this.usergroupId);
    }
    /**
     * @return The user IDs that represent the entire list of users for the
     * User Group.
     * 
     */
    public List<String> users() {
        return this.users;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUsergroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> channels;
        private String description;
        private String handle;
        private String id;
        private @Nullable String name;
        private @Nullable String usergroupId;
        private List<String> users;
        public Builder() {}
        public Builder(GetUsergroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channels = defaults.channels;
    	      this.description = defaults.description;
    	      this.handle = defaults.handle;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.usergroupId = defaults.usergroupId;
    	      this.users = defaults.users;
        }

        @CustomType.Setter
        public Builder channels(List<String> channels) {
            if (channels == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "channels");
            }
            this.channels = channels;
            return this;
        }
        public Builder channels(String... channels) {
            return channels(List.of(channels));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder handle(String handle) {
            if (handle == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "handle");
            }
            this.handle = handle;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder usergroupId(@Nullable String usergroupId) {

            this.usergroupId = usergroupId;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<String> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetUsergroupResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(String... users) {
            return users(List.of(users));
        }
        public GetUsergroupResult build() {
            final var _resultValue = new GetUsergroupResult();
            _resultValue.channels = channels;
            _resultValue.description = description;
            _resultValue.handle = handle;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.usergroupId = usergroupId;
            _resultValue.users = users;
            return _resultValue;
        }
    }
}
