// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConversationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConversationArgs Empty = new GetConversationArgs();

    /**
     * The ID of the channel
     * 
     */
    @Import(name="channelId")
    private @Nullable Output<String> channelId;

    /**
     * @return The ID of the channel
     * 
     */
    public Optional<Output<String>> channelId() {
        return Optional.ofNullable(this.channelId);
    }

    /**
     * The conversation is privileged between two or more members
     * 
     */
    @Import(name="isPrivate")
    private @Nullable Output<Boolean> isPrivate;

    /**
     * @return The conversation is privileged between two or more members
     * 
     */
    public Optional<Output<Boolean>> isPrivate() {
        return Optional.ofNullable(this.isPrivate);
    }

    /**
     * The name of the public or private channel
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the public or private channel
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GetConversationArgs() {}

    private GetConversationArgs(GetConversationArgs $) {
        this.channelId = $.channelId;
        this.isPrivate = $.isPrivate;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConversationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConversationArgs $;

        public Builder() {
            $ = new GetConversationArgs();
        }

        public Builder(GetConversationArgs defaults) {
            $ = new GetConversationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param channelId The ID of the channel
         * 
         * @return builder
         * 
         */
        public Builder channelId(@Nullable Output<String> channelId) {
            $.channelId = channelId;
            return this;
        }

        /**
         * @param channelId The ID of the channel
         * 
         * @return builder
         * 
         */
        public Builder channelId(String channelId) {
            return channelId(Output.of(channelId));
        }

        /**
         * @param isPrivate The conversation is privileged between two or more members
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(@Nullable Output<Boolean> isPrivate) {
            $.isPrivate = isPrivate;
            return this;
        }

        /**
         * @param isPrivate The conversation is privileged between two or more members
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(Boolean isPrivate) {
            return isPrivate(Output.of(isPrivate));
        }

        /**
         * @param name The name of the public or private channel
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the public or private channel
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GetConversationArgs build() {
            return $;
        }
    }

}
