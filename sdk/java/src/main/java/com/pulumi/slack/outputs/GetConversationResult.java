// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetConversationResult {
    private String channelId;
    /**
     * @return is a unix timestamp.
     * 
     */
    private Integer created;
    /**
     * @return is the user ID of the member that created this channel.
     * 
     */
    private String creator;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return indicates a conversation is archived. Frozen in time.
     * 
     */
    private Boolean isArchived;
    /**
     * @return represents this conversation as being part of a Shared Channel
     * with a remote organization.
     * 
     */
    private Boolean isExtShared;
    /**
     * @return will be true if this channel is the &#34;general&#34; channel that includes
     * all regular team members.
     * 
     */
    private Boolean isGeneral;
    /**
     * @return explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     * 
     */
    private Boolean isOrgShared;
    /**
     * @return means the conversation is privileged between two or more members.
     * 
     */
    private Boolean isPrivate;
    /**
     * @return means the conversation is in some way shared between multiple workspaces.
     * 
     */
    private Boolean isShared;
    /**
     * @return name of the public or private channel.
     * 
     */
    private String name;
    /**
     * @return purpose of the channel.
     * 
     */
    private String purpose;
    /**
     * @return topic for the channel.
     * 
     */
    private String topic;

    private GetConversationResult() {}
    public String channelId() {
        return this.channelId;
    }
    /**
     * @return is a unix timestamp.
     * 
     */
    public Integer created() {
        return this.created;
    }
    /**
     * @return is the user ID of the member that created this channel.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return indicates a conversation is archived. Frozen in time.
     * 
     */
    public Boolean isArchived() {
        return this.isArchived;
    }
    /**
     * @return represents this conversation as being part of a Shared Channel
     * with a remote organization.
     * 
     */
    public Boolean isExtShared() {
        return this.isExtShared;
    }
    /**
     * @return will be true if this channel is the &#34;general&#34; channel that includes
     * all regular team members.
     * 
     */
    public Boolean isGeneral() {
        return this.isGeneral;
    }
    /**
     * @return explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     * 
     */
    public Boolean isOrgShared() {
        return this.isOrgShared;
    }
    /**
     * @return means the conversation is privileged between two or more members.
     * 
     */
    public Boolean isPrivate() {
        return this.isPrivate;
    }
    /**
     * @return means the conversation is in some way shared between multiple workspaces.
     * 
     */
    public Boolean isShared() {
        return this.isShared;
    }
    /**
     * @return name of the public or private channel.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return purpose of the channel.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return topic for the channel.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConversationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String channelId;
        private Integer created;
        private String creator;
        private String id;
        private Boolean isArchived;
        private Boolean isExtShared;
        private Boolean isGeneral;
        private Boolean isOrgShared;
        private Boolean isPrivate;
        private Boolean isShared;
        private String name;
        private String purpose;
        private String topic;
        public Builder() {}
        public Builder(GetConversationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelId = defaults.channelId;
    	      this.created = defaults.created;
    	      this.creator = defaults.creator;
    	      this.id = defaults.id;
    	      this.isArchived = defaults.isArchived;
    	      this.isExtShared = defaults.isExtShared;
    	      this.isGeneral = defaults.isGeneral;
    	      this.isOrgShared = defaults.isOrgShared;
    	      this.isPrivate = defaults.isPrivate;
    	      this.isShared = defaults.isShared;
    	      this.name = defaults.name;
    	      this.purpose = defaults.purpose;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder channelId(String channelId) {
            this.channelId = Objects.requireNonNull(channelId);
            return this;
        }
        @CustomType.Setter
        public Builder created(Integer created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            this.creator = Objects.requireNonNull(creator);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isArchived(Boolean isArchived) {
            this.isArchived = Objects.requireNonNull(isArchived);
            return this;
        }
        @CustomType.Setter
        public Builder isExtShared(Boolean isExtShared) {
            this.isExtShared = Objects.requireNonNull(isExtShared);
            return this;
        }
        @CustomType.Setter
        public Builder isGeneral(Boolean isGeneral) {
            this.isGeneral = Objects.requireNonNull(isGeneral);
            return this;
        }
        @CustomType.Setter
        public Builder isOrgShared(Boolean isOrgShared) {
            this.isOrgShared = Objects.requireNonNull(isOrgShared);
            return this;
        }
        @CustomType.Setter
        public Builder isPrivate(Boolean isPrivate) {
            this.isPrivate = Objects.requireNonNull(isPrivate);
            return this;
        }
        @CustomType.Setter
        public Builder isShared(Boolean isShared) {
            this.isShared = Objects.requireNonNull(isShared);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            this.topic = Objects.requireNonNull(topic);
            return this;
        }
        public GetConversationResult build() {
            final var o = new GetConversationResult();
            o.channelId = channelId;
            o.created = created;
            o.creator = creator;
            o.id = id;
            o.isArchived = isArchived;
            o.isExtShared = isExtShared;
            o.isGeneral = isGeneral;
            o.isOrgShared = isOrgShared;
            o.isPrivate = isPrivate;
            o.isShared = isShared;
            o.name = name;
            o.purpose = purpose;
            o.topic = topic;
            return o;
        }
    }
}
