// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.slack.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetConversationResult {
    private @Nullable String channelId;
    /**
     * @return is a unix timestamp.
     * 
     */
    private Integer created;
    /**
     * @return is the user ID of the member that created this channel.
     * 
     */
    private String creator;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return indicates a conversation is archived. Frozen in time.
     * 
     */
    private Boolean isArchived;
    /**
     * @return represents this conversation as being part of a Shared Channel
     * with a remote organization.
     * 
     */
    private Boolean isExtShared;
    /**
     * @return will be true if this channel is the &#34;general&#34; channel that includes
     * all regular team members.
     * 
     */
    private Boolean isGeneral;
    /**
     * @return explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     * 
     */
    private Boolean isOrgShared;
    /**
     * @return means the conversation is privileged between two or more members.
     * 
     */
    private @Nullable Boolean isPrivate;
    /**
     * @return means the conversation is in some way shared between multiple workspaces.
     * 
     */
    private Boolean isShared;
    /**
     * @return name of the public or private channel.
     * 
     */
    private @Nullable String name;
    /**
     * @return purpose of the channel.
     * 
     */
    private String purpose;
    /**
     * @return topic for the channel.
     * 
     */
    private String topic;

    private GetConversationResult() {}
    public Optional<String> channelId() {
        return Optional.ofNullable(this.channelId);
    }
    /**
     * @return is a unix timestamp.
     * 
     */
    public Integer created() {
        return this.created;
    }
    /**
     * @return is the user ID of the member that created this channel.
     * 
     */
    public String creator() {
        return this.creator;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return indicates a conversation is archived. Frozen in time.
     * 
     */
    public Boolean isArchived() {
        return this.isArchived;
    }
    /**
     * @return represents this conversation as being part of a Shared Channel
     * with a remote organization.
     * 
     */
    public Boolean isExtShared() {
        return this.isExtShared;
    }
    /**
     * @return will be true if this channel is the &#34;general&#34; channel that includes
     * all regular team members.
     * 
     */
    public Boolean isGeneral() {
        return this.isGeneral;
    }
    /**
     * @return explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     * 
     */
    public Boolean isOrgShared() {
        return this.isOrgShared;
    }
    /**
     * @return means the conversation is privileged between two or more members.
     * 
     */
    public Optional<Boolean> isPrivate() {
        return Optional.ofNullable(this.isPrivate);
    }
    /**
     * @return means the conversation is in some way shared between multiple workspaces.
     * 
     */
    public Boolean isShared() {
        return this.isShared;
    }
    /**
     * @return name of the public or private channel.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return purpose of the channel.
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return topic for the channel.
     * 
     */
    public String topic() {
        return this.topic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConversationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String channelId;
        private Integer created;
        private String creator;
        private String id;
        private Boolean isArchived;
        private Boolean isExtShared;
        private Boolean isGeneral;
        private Boolean isOrgShared;
        private @Nullable Boolean isPrivate;
        private Boolean isShared;
        private @Nullable String name;
        private String purpose;
        private String topic;
        public Builder() {}
        public Builder(GetConversationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelId = defaults.channelId;
    	      this.created = defaults.created;
    	      this.creator = defaults.creator;
    	      this.id = defaults.id;
    	      this.isArchived = defaults.isArchived;
    	      this.isExtShared = defaults.isExtShared;
    	      this.isGeneral = defaults.isGeneral;
    	      this.isOrgShared = defaults.isOrgShared;
    	      this.isPrivate = defaults.isPrivate;
    	      this.isShared = defaults.isShared;
    	      this.name = defaults.name;
    	      this.purpose = defaults.purpose;
    	      this.topic = defaults.topic;
        }

        @CustomType.Setter
        public Builder channelId(@Nullable String channelId) {

            this.channelId = channelId;
            return this;
        }
        @CustomType.Setter
        public Builder created(Integer created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder creator(String creator) {
            if (creator == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "creator");
            }
            this.creator = creator;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isArchived(Boolean isArchived) {
            if (isArchived == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "isArchived");
            }
            this.isArchived = isArchived;
            return this;
        }
        @CustomType.Setter
        public Builder isExtShared(Boolean isExtShared) {
            if (isExtShared == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "isExtShared");
            }
            this.isExtShared = isExtShared;
            return this;
        }
        @CustomType.Setter
        public Builder isGeneral(Boolean isGeneral) {
            if (isGeneral == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "isGeneral");
            }
            this.isGeneral = isGeneral;
            return this;
        }
        @CustomType.Setter
        public Builder isOrgShared(Boolean isOrgShared) {
            if (isOrgShared == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "isOrgShared");
            }
            this.isOrgShared = isOrgShared;
            return this;
        }
        @CustomType.Setter
        public Builder isPrivate(@Nullable Boolean isPrivate) {

            this.isPrivate = isPrivate;
            return this;
        }
        @CustomType.Setter
        public Builder isShared(Boolean isShared) {
            if (isShared == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "isShared");
            }
            this.isShared = isShared;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            if (purpose == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "purpose");
            }
            this.purpose = purpose;
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("GetConversationResult", "topic");
            }
            this.topic = topic;
            return this;
        }
        public GetConversationResult build() {
            final var _resultValue = new GetConversationResult();
            _resultValue.channelId = channelId;
            _resultValue.created = created;
            _resultValue.creator = creator;
            _resultValue.id = id;
            _resultValue.isArchived = isArchived;
            _resultValue.isExtShared = isExtShared;
            _resultValue.isGeneral = isGeneral;
            _resultValue.isOrgShared = isOrgShared;
            _resultValue.isPrivate = isPrivate;
            _resultValue.isShared = isShared;
            _resultValue.name = name;
            _resultValue.purpose = purpose;
            _resultValue.topic = topic;
            return _resultValue;
        }
    }
}
