// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a Slack channel
 *
 * ## Required scopes
 *
 * This resource requires the following scopes:
 *
 * If using `bot` tokens:
 *
 * - [channels:read](https://api.slack.com/scopes/channels:read)
 *   (public channels)
 * - [channels:manage](https://api.slack.com/scopes/channels:manage)
 *   (public channels)
 * - [channels:join](https://api.slack.com/scopes/channels:join)
 *   (adopting existing public channels)
 * - [groups:read](https://api.slack.com/scopes/groups:read)
 *   (private channels)
 * - [groups:write](https://api.slack.com/scopes/groups:write)
 *   (private channels)
 *
 * If using `user` tokens:
 *
 * - [channels:read](https://api.slack.com/scopes/channels:read) (public channels)
 * - [channels:write](https://api.slack.com/scopes/channels:manage) (public channels)
 * - [groups:read](https://api.slack.com/scopes/groups:read) (private channels)
 * - [groups:write](https://api.slack.com/scopes/groups:write) (private channels)
 *
 * The Slack API methods used by the resource are:
 *
 * - [conversations.create](https://api.slack.com/methods/conversations.create)
 * - [conversations.join](https://api.slack.com/methods/conversations.join)
 * - [conversations.setTopic](https://api.slack.com/methods/conversations.setTopic)
 * - [conversations.setPurpose](https://api.slack.com/methods/conversations.setPurpose)
 * - [conversations.info](https://api.slack.com/methods/conversations.info)
 * - [conversations.members](https://api.slack.com/methods/conversations.members)
 * - [conversations.kick](https://api.slack.com/methods/conversations.kick)
 * - [conversations.invite](https://api.slack.com/methods/conversations.invite)
 * - [conversations.rename](https://api.slack.com/methods/conversations.rename)
 * - [conversations.archive](https://api.slack.com/methods/conversations.archive)
 * - [conversations.unarchive](https://api.slack.com/methods/conversations.unarchive)
 *
 * If you get `missingScope` errors while using this resource check the scopes against
 * the documentation for the methods above.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as slack from "@pulumi/slack";
 *
 * const test = new slack.Conversation("test", {
 *     name: "my-channel",
 *     topic: "The topic for my channel",
 *     permanentMembers: [],
 *     isPrivate: true,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as slack from "@pulumi/slack";
 *
 * const nonadmin = new slack.Conversation("nonadmin", {
 *     name: "my-channel01",
 *     topic: "The channel won't be archived on destroy",
 *     permanentMembers: [],
 *     isPrivate: true,
 *     actionOnDestroy: "none",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as slack from "@pulumi/slack";
 *
 * const adopted = new slack.Conversation("adopted", {
 *     name: "my-channel02",
 *     topic: "Adopt existing, don't kick members",
 *     permanentMembers: [],
 *     adoptExistingChannel: true,
 *     actionOnUpdatePermanentMembers: "none",
 * });
 * ```
 *
 * ## Import
 *
 * `slack_conversation` can be imported using the ID of the conversation/channel, e.g.
 *
 * ```sh
 * $ pulumi import slack:index/conversation:Conversation my_conversation C023X7QTFHQ
 * ```
 */
export class Conversation extends pulumi.CustomResource {
    /**
     * Get an existing Conversation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConversationState, opts?: pulumi.CustomResourceOptions): Conversation {
        return new Conversation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'slack:index/conversation:Conversation';

    /**
     * Returns true if the given object is an instance of Conversation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Conversation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Conversation.__pulumiType;
    }

    /**
     * indicates whether the
     * conversation should be archived or left behind on destroy. Valid values are
     * `archive | none`. Note that when set to `none` the conversation will be left
     * as it is  and as a result any subsequent runs of pulumi up with the same
     * name  will fail.
     */
    declare public readonly actionOnDestroy: pulumi.Output<string | undefined>;
    /**
     * indicate
     * whether the members should be kick of the channel when removed from
     * `permanentMembers`. When set to `none` the user are never kicked, this prevent
     * a side effect on public channels where user that joined the channel are kicked.
     */
    declare public readonly actionOnUpdatePermanentMembers: pulumi.Output<string | undefined>;
    declare public readonly adoptExistingChannel: pulumi.Output<boolean | undefined>;
    /**
     * is a unix timestamp.
     */
    declare public /*out*/ readonly created: pulumi.Output<number>;
    /**
     * is the user ID of the member that created this channel.
     */
    declare public /*out*/ readonly creator: pulumi.Output<string>;
    /**
     * indicates a conversation is archived. Frozen in time.
     */
    declare public readonly isArchived: pulumi.Output<boolean | undefined>;
    /**
     * represents this conversation as being part of a Shared Channel
     * with a remote organization.
     */
    declare public /*out*/ readonly isExtShared: pulumi.Output<boolean>;
    /**
     * will be true if this channel is the "general" channel that includes
     * all regular team members.
     */
    declare public /*out*/ readonly isGeneral: pulumi.Output<boolean>;
    /**
     * explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     */
    declare public /*out*/ readonly isOrgShared: pulumi.Output<boolean>;
    /**
     * create a private channel instead of a public one.
     */
    declare public readonly isPrivate: pulumi.Output<boolean>;
    /**
     * means the conversation is in some way shared between multiple workspaces.
     */
    declare public /*out*/ readonly isShared: pulumi.Output<boolean>;
    /**
     * name of the public or private channel.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * user IDs to add to the channel.
     */
    declare public readonly permanentMembers: pulumi.Output<string[] | undefined>;
    /**
     * purpose of the channel.
     */
    declare public readonly purpose: pulumi.Output<string | undefined>;
    /**
     * topic for the channel.
     */
    declare public readonly topic: pulumi.Output<string | undefined>;

    /**
     * Create a Conversation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConversationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConversationArgs | ConversationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConversationState | undefined;
            resourceInputs["actionOnDestroy"] = state?.actionOnDestroy;
            resourceInputs["actionOnUpdatePermanentMembers"] = state?.actionOnUpdatePermanentMembers;
            resourceInputs["adoptExistingChannel"] = state?.adoptExistingChannel;
            resourceInputs["created"] = state?.created;
            resourceInputs["creator"] = state?.creator;
            resourceInputs["isArchived"] = state?.isArchived;
            resourceInputs["isExtShared"] = state?.isExtShared;
            resourceInputs["isGeneral"] = state?.isGeneral;
            resourceInputs["isOrgShared"] = state?.isOrgShared;
            resourceInputs["isPrivate"] = state?.isPrivate;
            resourceInputs["isShared"] = state?.isShared;
            resourceInputs["name"] = state?.name;
            resourceInputs["permanentMembers"] = state?.permanentMembers;
            resourceInputs["purpose"] = state?.purpose;
            resourceInputs["topic"] = state?.topic;
        } else {
            const args = argsOrState as ConversationArgs | undefined;
            if (args?.isPrivate === undefined && !opts.urn) {
                throw new Error("Missing required property 'isPrivate'");
            }
            resourceInputs["actionOnDestroy"] = args?.actionOnDestroy;
            resourceInputs["actionOnUpdatePermanentMembers"] = args?.actionOnUpdatePermanentMembers;
            resourceInputs["adoptExistingChannel"] = args?.adoptExistingChannel;
            resourceInputs["isArchived"] = args?.isArchived;
            resourceInputs["isPrivate"] = args?.isPrivate;
            resourceInputs["name"] = args?.name;
            resourceInputs["permanentMembers"] = args?.permanentMembers;
            resourceInputs["purpose"] = args?.purpose;
            resourceInputs["topic"] = args?.topic;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["creator"] = undefined /*out*/;
            resourceInputs["isExtShared"] = undefined /*out*/;
            resourceInputs["isGeneral"] = undefined /*out*/;
            resourceInputs["isOrgShared"] = undefined /*out*/;
            resourceInputs["isShared"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Conversation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Conversation resources.
 */
export interface ConversationState {
    /**
     * indicates whether the
     * conversation should be archived or left behind on destroy. Valid values are
     * `archive | none`. Note that when set to `none` the conversation will be left
     * as it is  and as a result any subsequent runs of pulumi up with the same
     * name  will fail.
     */
    actionOnDestroy?: pulumi.Input<string>;
    /**
     * indicate
     * whether the members should be kick of the channel when removed from
     * `permanentMembers`. When set to `none` the user are never kicked, this prevent
     * a side effect on public channels where user that joined the channel are kicked.
     */
    actionOnUpdatePermanentMembers?: pulumi.Input<string>;
    adoptExistingChannel?: pulumi.Input<boolean>;
    /**
     * is a unix timestamp.
     */
    created?: pulumi.Input<number>;
    /**
     * is the user ID of the member that created this channel.
     */
    creator?: pulumi.Input<string>;
    /**
     * indicates a conversation is archived. Frozen in time.
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * represents this conversation as being part of a Shared Channel
     * with a remote organization.
     */
    isExtShared?: pulumi.Input<boolean>;
    /**
     * will be true if this channel is the "general" channel that includes
     * all regular team members.
     */
    isGeneral?: pulumi.Input<boolean>;
    /**
     * explains whether this shared channel is shared between Enterprise
     * Grid workspaces within the same organization.
     */
    isOrgShared?: pulumi.Input<boolean>;
    /**
     * create a private channel instead of a public one.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * means the conversation is in some way shared between multiple workspaces.
     */
    isShared?: pulumi.Input<boolean>;
    /**
     * name of the public or private channel.
     */
    name?: pulumi.Input<string>;
    /**
     * user IDs to add to the channel.
     */
    permanentMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * purpose of the channel.
     */
    purpose?: pulumi.Input<string>;
    /**
     * topic for the channel.
     */
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Conversation resource.
 */
export interface ConversationArgs {
    /**
     * indicates whether the
     * conversation should be archived or left behind on destroy. Valid values are
     * `archive | none`. Note that when set to `none` the conversation will be left
     * as it is  and as a result any subsequent runs of pulumi up with the same
     * name  will fail.
     */
    actionOnDestroy?: pulumi.Input<string>;
    /**
     * indicate
     * whether the members should be kick of the channel when removed from
     * `permanentMembers`. When set to `none` the user are never kicked, this prevent
     * a side effect on public channels where user that joined the channel are kicked.
     */
    actionOnUpdatePermanentMembers?: pulumi.Input<string>;
    adoptExistingChannel?: pulumi.Input<boolean>;
    /**
     * indicates a conversation is archived. Frozen in time.
     */
    isArchived?: pulumi.Input<boolean>;
    /**
     * create a private channel instead of a public one.
     */
    isPrivate: pulumi.Input<boolean>;
    /**
     * name of the public or private channel.
     */
    name?: pulumi.Input<string>;
    /**
     * user IDs to add to the channel.
     */
    permanentMembers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * purpose of the channel.
     */
    purpose?: pulumi.Input<string>;
    /**
     * topic for the channel.
     */
    topic?: pulumi.Input<string>;
}
