// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConversationArgs, ConversationState } from "./conversation";
export type Conversation = import("./conversation").Conversation;
export const Conversation: typeof import("./conversation").Conversation = null as any;
utilities.lazyLoad(exports, ["Conversation"], () => require("./conversation"));

export { GetConversationArgs, GetConversationResult, GetConversationOutputArgs } from "./getConversation";
export const getConversation: typeof import("./getConversation").getConversation = null as any;
export const getConversationOutput: typeof import("./getConversation").getConversationOutput = null as any;
utilities.lazyLoad(exports, ["getConversation","getConversationOutput"], () => require("./getConversation"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsergroupArgs, GetUsergroupResult, GetUsergroupOutputArgs } from "./getUsergroup";
export const getUsergroup: typeof import("./getUsergroup").getUsergroup = null as any;
export const getUsergroupOutput: typeof import("./getUsergroup").getUsergroupOutput = null as any;
utilities.lazyLoad(exports, ["getUsergroup","getUsergroupOutput"], () => require("./getUsergroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UsergroupArgs, UsergroupState } from "./usergroup";
export type Usergroup = import("./usergroup").Usergroup;
export const Usergroup: typeof import("./usergroup").Usergroup = null as any;
utilities.lazyLoad(exports, ["Usergroup"], () => require("./usergroup"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "slack:index/conversation:Conversation":
                return new Conversation(name, <any>undefined, { urn })
            case "slack:index/usergroup:Usergroup":
                return new Usergroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("slack", "index/conversation", _module)
pulumi.runtime.registerResourceModule("slack", "index/usergroup", _module)
pulumi.runtime.registerResourcePackage("slack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:slack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
