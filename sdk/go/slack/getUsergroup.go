// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package slack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a usergroups for use in other
// resources. The data source returns enabled groups only.
//
// ## Required scopes
//
// This resource requires the following scopes:
//
// - [usergroups:read](https://api.slack.com/scopes/usergroups:read)
//
// The Slack API methods used by the resource are:
//
// - [usergroups.list](https://api.slack.com/methods/usergroups.list)
//
// If you get `missingScope` errors while using this resource check the scopes against
// the documentation for the methods above.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-slack/sdk/go/slack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := slack.LookupUsergroup(ctx, &slack.LookupUsergroupArgs{
//				Name: pulumi.StringRef("my-usergroup"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = slack.LookupUsergroup(ctx, &slack.LookupUsergroupArgs{
//				UsergroupId: pulumi.StringRef("USERGROUP00"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUsergroup(ctx *pulumi.Context, args *LookupUsergroupArgs, opts ...pulumi.InvokeOption) (*LookupUsergroupResult, error) {
	var rv LookupUsergroupResult
	err := ctx.Invoke("slack:index/getUsergroup:getUsergroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsergroup.
type LookupUsergroupArgs struct {
	// The name of the usergroup
	Name *string `pulumi:"name"`
	// The id of the usergroup
	UsergroupId *string `pulumi:"usergroupId"`
}

// A collection of values returned by getUsergroup.
type LookupUsergroupResult struct {
	// The channel IDs for which the User Group uses as a default.
	Channels []string `pulumi:"channels"`
	// The short description of the User Group.
	Description string `pulumi:"description"`
	// The mention handle.
	Handle string `pulumi:"handle"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	Name        *string `pulumi:"name"`
	UsergroupId *string `pulumi:"usergroupId"`
	// The user IDs that represent the entire list of users for the
	// User Group.
	Users []string `pulumi:"users"`
}

func LookupUsergroupOutput(ctx *pulumi.Context, args LookupUsergroupOutputArgs, opts ...pulumi.InvokeOption) LookupUsergroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUsergroupResult, error) {
			args := v.(LookupUsergroupArgs)
			r, err := LookupUsergroup(ctx, &args, opts...)
			var s LookupUsergroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUsergroupResultOutput)
}

// A collection of arguments for invoking getUsergroup.
type LookupUsergroupOutputArgs struct {
	// The name of the usergroup
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The id of the usergroup
	UsergroupId pulumi.StringPtrInput `pulumi:"usergroupId"`
}

func (LookupUsergroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsergroupArgs)(nil)).Elem()
}

// A collection of values returned by getUsergroup.
type LookupUsergroupResultOutput struct{ *pulumi.OutputState }

func (LookupUsergroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUsergroupResult)(nil)).Elem()
}

func (o LookupUsergroupResultOutput) ToLookupUsergroupResultOutput() LookupUsergroupResultOutput {
	return o
}

func (o LookupUsergroupResultOutput) ToLookupUsergroupResultOutputWithContext(ctx context.Context) LookupUsergroupResultOutput {
	return o
}

// The channel IDs for which the User Group uses as a default.
func (o LookupUsergroupResultOutput) Channels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUsergroupResult) []string { return v.Channels }).(pulumi.StringArrayOutput)
}

// The short description of the User Group.
func (o LookupUsergroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsergroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The mention handle.
func (o LookupUsergroupResultOutput) Handle() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsergroupResult) string { return v.Handle }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUsergroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUsergroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUsergroupResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsergroupResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupUsergroupResultOutput) UsergroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUsergroupResult) *string { return v.UsergroupId }).(pulumi.StringPtrOutput)
}

// The user IDs that represent the entire list of users for the
// User Group.
func (o LookupUsergroupResultOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUsergroupResult) []string { return v.Users }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUsergroupResultOutput{})
}
