// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package slack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Slack User Group.
//
// ## Required scopes
//
// This resource requires the following scopes:
//
// - [usergroups:write](https://api.slack.com/scopes/usergroups:write)
// - [usergroups:read](https://api.slack.com/scopes/usergroups:read)
//
// The Slack API methods used by the resource are:
//
// - [usergroups.create](https://api.slack.com/methods/usergroups.create)
// - [usergroups.enable](https://api.slack.com/methods/usergroups.enable)
// - [usergroups.disable](https://api.slack.com/methods/usergroups.disable)
// - [usergroups.update](https://api.slack.com/methods/usergroups.update)
// - [usergroups.list](https://api.slack.com/methods/usergroups.list)
// - [usergroups.users.update](https://api.slack.com/methods/usergroups.users.update)
//
// If you get `missingScope` errors while using this resource check the scopes against
// the documentation for the methods above.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-slack/sdk/go/slack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := slack.NewUsergroup(ctx, "myGroup", &slack.UsergroupArgs{
// 			Channels: pulumi.StringArray{
// 				pulumi.String("CHANNEL00"),
// 			},
// 			Description: pulumi.String("Test user group"),
// 			Handle:      pulumi.String("test"),
// 			Users: pulumi.StringArray{
// 				pulumi.String("USER00"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Note that if a channel is removed from the `channels` list users are
// **not** removed from the channel. In order to keep the users in the
// groups and in the channel in sync set `permanentUsers` in the channel:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-slack/sdk/go/slack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myGroup, err := slack.NewUsergroup(ctx, "myGroup", &slack.UsergroupArgs{
// 			Handle:      pulumi.String("test"),
// 			Description: pulumi.String("Test user group"),
// 			Users: pulumi.StringArray{
// 				pulumi.String("USER00"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = slack.NewConversation(ctx, "test", &slack.ConversationArgs{
// 			Topic:            pulumi.String("The topic for my channel"),
// 			PermanentMembers: myGroup.Users,
// 			IsPrivate:        pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// `slack_usergroup` can be imported using the ID of the group, e.g.
//
// ```sh
//  $ pulumi import slack:index/usergroup:Usergroup my_group S022GE79E9G
// ```
type Usergroup struct {
	pulumi.CustomResourceState

	// channel IDs for which the User Group uses as a default.
	Channels pulumi.StringArrayOutput `pulumi:"channels"`
	// a short description of the User Group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// a mention handle. Must be unique among channels, users
	// and User Groups.
	Handle pulumi.StringPtrOutput `pulumi:"handle"`
	// a name for the User Group. Must be unique among User Groups.
	Name pulumi.StringOutput `pulumi:"name"`
	// user IDs that represent the entire list of users for the
	// User Group.
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewUsergroup registers a new resource with the given unique name, arguments, and options.
func NewUsergroup(ctx *pulumi.Context,
	name string, args *UsergroupArgs, opts ...pulumi.ResourceOption) (*Usergroup, error) {
	if args == nil {
		args = &UsergroupArgs{}
	}

	var resource Usergroup
	err := ctx.RegisterResource("slack:index/usergroup:Usergroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsergroup gets an existing Usergroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsergroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsergroupState, opts ...pulumi.ResourceOption) (*Usergroup, error) {
	var resource Usergroup
	err := ctx.ReadResource("slack:index/usergroup:Usergroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Usergroup resources.
type usergroupState struct {
	// channel IDs for which the User Group uses as a default.
	Channels []string `pulumi:"channels"`
	// a short description of the User Group.
	Description *string `pulumi:"description"`
	// a mention handle. Must be unique among channels, users
	// and User Groups.
	Handle *string `pulumi:"handle"`
	// a name for the User Group. Must be unique among User Groups.
	Name *string `pulumi:"name"`
	// user IDs that represent the entire list of users for the
	// User Group.
	Users []string `pulumi:"users"`
}

type UsergroupState struct {
	// channel IDs for which the User Group uses as a default.
	Channels pulumi.StringArrayInput
	// a short description of the User Group.
	Description pulumi.StringPtrInput
	// a mention handle. Must be unique among channels, users
	// and User Groups.
	Handle pulumi.StringPtrInput
	// a name for the User Group. Must be unique among User Groups.
	Name pulumi.StringPtrInput
	// user IDs that represent the entire list of users for the
	// User Group.
	Users pulumi.StringArrayInput
}

func (UsergroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*usergroupState)(nil)).Elem()
}

type usergroupArgs struct {
	// channel IDs for which the User Group uses as a default.
	Channels []string `pulumi:"channels"`
	// a short description of the User Group.
	Description *string `pulumi:"description"`
	// a mention handle. Must be unique among channels, users
	// and User Groups.
	Handle *string `pulumi:"handle"`
	// a name for the User Group. Must be unique among User Groups.
	Name *string `pulumi:"name"`
	// user IDs that represent the entire list of users for the
	// User Group.
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a Usergroup resource.
type UsergroupArgs struct {
	// channel IDs for which the User Group uses as a default.
	Channels pulumi.StringArrayInput
	// a short description of the User Group.
	Description pulumi.StringPtrInput
	// a mention handle. Must be unique among channels, users
	// and User Groups.
	Handle pulumi.StringPtrInput
	// a name for the User Group. Must be unique among User Groups.
	Name pulumi.StringPtrInput
	// user IDs that represent the entire list of users for the
	// User Group.
	Users pulumi.StringArrayInput
}

func (UsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usergroupArgs)(nil)).Elem()
}

type UsergroupInput interface {
	pulumi.Input

	ToUsergroupOutput() UsergroupOutput
	ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput
}

func (*Usergroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Usergroup)(nil)).Elem()
}

func (i *Usergroup) ToUsergroupOutput() UsergroupOutput {
	return i.ToUsergroupOutputWithContext(context.Background())
}

func (i *Usergroup) ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupOutput)
}

// UsergroupArrayInput is an input type that accepts UsergroupArray and UsergroupArrayOutput values.
// You can construct a concrete instance of `UsergroupArrayInput` via:
//
//          UsergroupArray{ UsergroupArgs{...} }
type UsergroupArrayInput interface {
	pulumi.Input

	ToUsergroupArrayOutput() UsergroupArrayOutput
	ToUsergroupArrayOutputWithContext(context.Context) UsergroupArrayOutput
}

type UsergroupArray []UsergroupInput

func (UsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Usergroup)(nil)).Elem()
}

func (i UsergroupArray) ToUsergroupArrayOutput() UsergroupArrayOutput {
	return i.ToUsergroupArrayOutputWithContext(context.Background())
}

func (i UsergroupArray) ToUsergroupArrayOutputWithContext(ctx context.Context) UsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupArrayOutput)
}

// UsergroupMapInput is an input type that accepts UsergroupMap and UsergroupMapOutput values.
// You can construct a concrete instance of `UsergroupMapInput` via:
//
//          UsergroupMap{ "key": UsergroupArgs{...} }
type UsergroupMapInput interface {
	pulumi.Input

	ToUsergroupMapOutput() UsergroupMapOutput
	ToUsergroupMapOutputWithContext(context.Context) UsergroupMapOutput
}

type UsergroupMap map[string]UsergroupInput

func (UsergroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Usergroup)(nil)).Elem()
}

func (i UsergroupMap) ToUsergroupMapOutput() UsergroupMapOutput {
	return i.ToUsergroupMapOutputWithContext(context.Background())
}

func (i UsergroupMap) ToUsergroupMapOutputWithContext(ctx context.Context) UsergroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupMapOutput)
}

type UsergroupOutput struct{ *pulumi.OutputState }

func (UsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Usergroup)(nil)).Elem()
}

func (o UsergroupOutput) ToUsergroupOutput() UsergroupOutput {
	return o
}

func (o UsergroupOutput) ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput {
	return o
}

// channel IDs for which the User Group uses as a default.
func (o UsergroupOutput) Channels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringArrayOutput { return v.Channels }).(pulumi.StringArrayOutput)
}

// a short description of the User Group.
func (o UsergroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// a mention handle. Must be unique among channels, users
// and User Groups.
func (o UsergroupOutput) Handle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringPtrOutput { return v.Handle }).(pulumi.StringPtrOutput)
}

// a name for the User Group. Must be unique among User Groups.
func (o UsergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// user IDs that represent the entire list of users for the
// User Group.
func (o UsergroupOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type UsergroupArrayOutput struct{ *pulumi.OutputState }

func (UsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Usergroup)(nil)).Elem()
}

func (o UsergroupArrayOutput) ToUsergroupArrayOutput() UsergroupArrayOutput {
	return o
}

func (o UsergroupArrayOutput) ToUsergroupArrayOutputWithContext(ctx context.Context) UsergroupArrayOutput {
	return o
}

func (o UsergroupArrayOutput) Index(i pulumi.IntInput) UsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Usergroup {
		return vs[0].([]*Usergroup)[vs[1].(int)]
	}).(UsergroupOutput)
}

type UsergroupMapOutput struct{ *pulumi.OutputState }

func (UsergroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Usergroup)(nil)).Elem()
}

func (o UsergroupMapOutput) ToUsergroupMapOutput() UsergroupMapOutput {
	return o
}

func (o UsergroupMapOutput) ToUsergroupMapOutputWithContext(ctx context.Context) UsergroupMapOutput {
	return o
}

func (o UsergroupMapOutput) MapIndex(k pulumi.StringInput) UsergroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Usergroup {
		return vs[0].(map[string]*Usergroup)[vs[1].(string)]
	}).(UsergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupInput)(nil)).Elem(), &Usergroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupArrayInput)(nil)).Elem(), UsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupMapInput)(nil)).Elem(), UsergroupMap{})
	pulumi.RegisterOutputType(UsergroupOutput{})
	pulumi.RegisterOutputType(UsergroupArrayOutput{})
	pulumi.RegisterOutputType(UsergroupMapOutput{})
}
