// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Slack
{
    /// <summary>
    /// Manages a Slack User Group.
    /// 
    /// ## Required scopes
    /// 
    /// This resource requires the following scopes:
    /// 
    /// - [usergroups:write](https://api.slack.com/scopes/usergroups:write)
    /// - [usergroups:read](https://api.slack.com/scopes/usergroups:read)
    /// 
    /// The Slack API methods used by the resource are:
    /// 
    /// - [usergroups.create](https://api.slack.com/methods/usergroups.create)
    /// - [usergroups.enable](https://api.slack.com/methods/usergroups.enable)
    /// - [usergroups.disable](https://api.slack.com/methods/usergroups.disable)
    /// - [usergroups.update](https://api.slack.com/methods/usergroups.update)
    /// - [usergroups.list](https://api.slack.com/methods/usergroups.list)
    /// - [usergroups.users.update](https://api.slack.com/methods/usergroups.users.update)
    /// 
    /// If you get `missing_scope` errors while using this resource check the scopes against
    /// the documentation for the methods above.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Slack = Pulumi.Slack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myGroup = new Slack.Usergroup("my_group", new()
    ///     {
    ///         Name = "TestGroup",
    ///         Handle = "test",
    ///         Description = "Test user group",
    ///         Users = new[]
    ///         {
    ///             "USER00",
    ///         },
    ///         Channels = new[]
    ///         {
    ///             "CHANNEL00",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// Note that if a channel is removed from the `channels` list users are
    /// **not** removed from the channel. In order to keep the users in the
    /// groups and in the channel in sync set `permanent_users` in the channel:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Slack = Pulumi.Slack;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myGroup = new Slack.Usergroup("my_group", new()
    ///     {
    ///         Name = "TestGroup",
    ///         Handle = "test",
    ///         Description = "Test user group",
    ///         Users = new[]
    ///         {
    ///             "USER00",
    ///         },
    ///     });
    /// 
    ///     var test = new Slack.Conversation("test", new()
    ///     {
    ///         Name = "my-channel",
    ///         Topic = "The topic for my channel",
    ///         PermanentMembers = myGroup.Users,
    ///         IsPrivate = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// `slack_usergroup` can be imported using the ID of the group, e.g.
    /// 
    /// ```sh
    /// $ pulumi import slack:index/usergroup:Usergroup my_group S022GE79E9G
    /// ```
    /// </summary>
    [SlackResourceType("slack:index/usergroup:Usergroup")]
    public partial class Usergroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// channel IDs for which the User Group uses as a default.
        /// </summary>
        [Output("channels")]
        public Output<ImmutableArray<string>> Channels { get; private set; } = null!;

        /// <summary>
        /// a short description of the User Group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// a mention handle. Must be unique among channels, users
        /// and User Groups.
        /// </summary>
        [Output("handle")]
        public Output<string?> Handle { get; private set; } = null!;

        /// <summary>
        /// a name for the User Group. Must be unique among User Groups.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// user IDs that represent the entire list of users for the
        /// User Group.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<string>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Usergroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Usergroup(string name, UsergroupArgs? args = null, CustomResourceOptions? options = null)
            : base("slack:index/usergroup:Usergroup", name, args ?? new UsergroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Usergroup(string name, Input<string> id, UsergroupState? state = null, CustomResourceOptions? options = null)
            : base("slack:index/usergroup:Usergroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Usergroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Usergroup Get(string name, Input<string> id, UsergroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Usergroup(name, id, state, options);
        }
    }

    public sealed class UsergroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("channels")]
        private InputList<string>? _channels;

        /// <summary>
        /// channel IDs for which the User Group uses as a default.
        /// </summary>
        public InputList<string> Channels
        {
            get => _channels ?? (_channels = new InputList<string>());
            set => _channels = value;
        }

        /// <summary>
        /// a short description of the User Group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// a mention handle. Must be unique among channels, users
        /// and User Groups.
        /// </summary>
        [Input("handle")]
        public Input<string>? Handle { get; set; }

        /// <summary>
        /// a name for the User Group. Must be unique among User Groups.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// user IDs that represent the entire list of users for the
        /// User Group.
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public UsergroupArgs()
        {
        }
        public static new UsergroupArgs Empty => new UsergroupArgs();
    }

    public sealed class UsergroupState : global::Pulumi.ResourceArgs
    {
        [Input("channels")]
        private InputList<string>? _channels;

        /// <summary>
        /// channel IDs for which the User Group uses as a default.
        /// </summary>
        public InputList<string> Channels
        {
            get => _channels ?? (_channels = new InputList<string>());
            set => _channels = value;
        }

        /// <summary>
        /// a short description of the User Group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// a mention handle. Must be unique among channels, users
        /// and User Groups.
        /// </summary>
        [Input("handle")]
        public Input<string>? Handle { get; set; }

        /// <summary>
        /// a name for the User Group. Must be unique among User Groups.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("users")]
        private InputList<string>? _users;

        /// <summary>
        /// user IDs that represent the entire list of users for the
        /// User Group.
        /// </summary>
        public InputList<string> Users
        {
            get => _users ?? (_users = new InputList<string>());
            set => _users = value;
        }

        public UsergroupState()
        {
        }
        public static new UsergroupState Empty => new UsergroupState();
    }
}
